# Makefile for running naive_bayes_AL experiments
# All experiments run in background with all n_pos values (8, 16, 32)
# Generated by generate_makefile.py

# Python configuration
PYTHON_VERSION = python3
VENV_NAME = venv
VENV_PYTHON = $(VENV_NAME)/bin/python

# Experiment parameters
REPEATS = 20
BATCH_SIZE = 1000
N_POS_VALUES = 8 16 32

# Datasets
DATASETS = Hall Kitchenham Radjenovic Wahono

# Discovered treatments
TREATMENTS = tfidf_100_max_features_10000_top_n_100 \
             tfidf_50_max_features_10000_top_n_50 \
             tfidf_chi2_100_max_features_10000_top_n_100 \
             tfidf_chi2_50_max_features_10000_top_n_50 \
             tfidf_chi2_svc_100_max_features_10000_random_state_42_svc_C_1.0_top_n_100 \
             tfidf_chi2_svc_50_max_features_10000_random_state_42_svc_C_1.0_top_n_50 \
             tfidf_ig_100_max_features_10000_random_state_42_top_n_100 \
             tfidf_ig_50_max_features_10000_random_state_42_top_n_50

# Setup virtual environment
.PHONY: venv
venv:
	@echo "Creating virtual environment..."
	@$(PYTHON_VERSION) -m venv $(VENV_NAME)
	@echo "Installing required packages..."
	@$(VENV_PYTHON) -m pip install --upgrade pip
	@$(VENV_PYTHON) -m pip install pandas numpy scikit-learn imbalanced-learn
	@echo "Virtual environment setup complete!"

# Run all regular experiments (all treatments, all datasets, all n_pos values)
.PHONY: all
all: venv
	@echo "Running all regular experiments..."
	@for treatment in $(TREATMENTS); do \
		for dataset in $(DATASETS); do \
			echo "Running $$treatment/$$dataset for all n_pos values..."; \
			mkdir -p ../results/$$treatment/$$dataset; \
			for n_pos in 8 16 32; do \
				echo "  Starting n_pos=$$n_pos..."; \
				nohup $(VENV_PYTHON) naive_bayes_AL.py \
					--input ../data/$$treatment/$$dataset.csv \
					--output ../results/$$treatment/$$dataset/results_nb_sk_al_n$$n_pos.csv \
					--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \
					> ../results/$$treatment/$$dataset/experiment_n$$n_pos.log 2>&1 & \
			done; \
		done; \
	done
	@echo "All regular experiments started!"

# Run all SMOTE experiments (all treatments, all datasets, all n_pos values)
.PHONY: all-smote
all-smote: venv
	@echo "Running all SMOTE experiments..."
	@for treatment in $(TREATMENTS); do \
		for dataset in $(DATASETS); do \
			echo "Running SMOTE $$treatment/$$dataset for all n_pos values..."; \
			mkdir -p ../results/SMOTE_$$treatment/$$dataset; \
			for n_pos in 8 16 32; do \
				echo "  Starting SMOTE n_pos=$$n_pos..."; \
				nohup $(VENV_PYTHON) naive_bayes_AL_SMOTE.py \
					--input ../data/$$treatment/$$dataset.csv \
					--output ../results/SMOTE_$$treatment/$$dataset/results_nb_sk_al_smote_n$$n_pos.csv \
					--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \
					> ../results/SMOTE_$$treatment/$$dataset/experiment_n$$n_pos.log 2>&1 & \
			done; \
		done; \
	done
	@echo "All SMOTE experiments started!"

# Run experiments for a specific treatment
.PHONY: run-treatment
run-treatment: venv
	@if [ -z "$(TREATMENT)" ]; then \
		echo "Usage: make run-treatment TREATMENT=<treatment_name>"; \
		echo "Available treatments: $(TREATMENTS)"; \
		exit 1; \
	fi
	@echo "Running regular experiments for treatment: $(TREATMENT)"
	@for dataset in $(DATASETS); do \
		echo "Running $(TREATMENT)/$$dataset for all n_pos values..."; \
		mkdir -p ../results/$(TREATMENT)/$$dataset; \
		for n_pos in 8 16 32; do \
			echo "  Starting n_pos=$$n_pos..."; \
			nohup $(VENV_PYTHON) naive_bayes_AL.py \
				--input ../data/$(TREATMENT)/$$dataset.csv \
				--output ../results/$(TREATMENT)/$$dataset/results_nb_sk_al_n$$n_pos.csv \
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \
				> ../results/$(TREATMENT)/$$dataset/experiment_n$$n_pos.log 2>&1 & \
		done; \
	done

# Run SMOTE experiments for a specific treatment
.PHONY: run-treatment-smote
run-treatment-smote: venv
	@if [ -z "$(TREATMENT)" ]; then \
		echo "Usage: make run-treatment-smote TREATMENT=<treatment_name>"; \
		echo "Available treatments: $(TREATMENTS)"; \
		exit 1; \
	fi
	@echo "Running SMOTE experiments for treatment: $(TREATMENT)"
	@for dataset in $(DATASETS); do \
		echo "Running SMOTE $(TREATMENT)/$$dataset for all n_pos values..."; \
		mkdir -p ../results/SMOTE_$(TREATMENT)/$$dataset; \
		for n_pos in 8 16 32; do \
			echo "  Starting SMOTE n_pos=$$n_pos..."; \
			nohup $(VENV_PYTHON) naive_bayes_AL_SMOTE.py \
				--input ../data/$(TREATMENT)/$$dataset.csv \
				--output ../results/SMOTE_$(TREATMENT)/$$dataset/results_nb_sk_al_smote_n$$n_pos.csv \
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \
				> ../results/SMOTE_$(TREATMENT)/$$dataset/experiment_n$$n_pos.log 2>&1 & \
		done; \
	done

# Run experiments for a specific dataset across all treatments
.PHONY: run-dataset
run-dataset: venv
	@if [ -z "$(DATASET)" ]; then \
		echo "Usage: make run-dataset DATASET=<dataset_name>"; \
		echo "Available datasets: $(DATASETS)"; \
		exit 1; \
	fi
	@echo "Running regular experiments for dataset: $(DATASET)"
	@for treatment in $(TREATMENTS); do \
		echo "Running $$treatment/$(DATASET) for all n_pos values..."; \
		mkdir -p ../results/$$treatment/$(DATASET); \
		for n_pos in 8 16 32; do \
			echo "  Starting n_pos=$$n_pos..."; \
			nohup $(VENV_PYTHON) naive_bayes_AL.py \
				--input ../data/$$treatment/$(DATASET).csv \
				--output ../results/$$treatment/$(DATASET)/results_nb_sk_al_n$$n_pos.csv \
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \
				> ../results/$$treatment/$(DATASET)/experiment_n$$n_pos.log 2>&1 & \
		done; \
	done

# Run SMOTE experiments for a specific dataset across all treatments
.PHONY: run-dataset-smote
run-dataset-smote: venv
	@if [ -z "$(DATASET)" ]; then \
		echo "Usage: make run-dataset-smote DATASET=<dataset_name>"; \
		echo "Available datasets: $(DATASETS)"; \
		exit 1; \
	fi
	@echo "Running SMOTE experiments for dataset: $(DATASET)"
	@for treatment in $(TREATMENTS); do \
		echo "Running SMOTE $$treatment/$(DATASET) for all n_pos values..."; \
		mkdir -p ../results/SMOTE_$$treatment/$(DATASET); \
		for n_pos in 8 16 32; do \
			echo "  Starting SMOTE n_pos=$$n_pos..."; \
			nohup $(VENV_PYTHON) naive_bayes_AL_SMOTE.py \
				--input ../data/$$treatment/$(DATASET).csv \
				--output ../results/SMOTE_$$treatment/$(DATASET)/results_nb_sk_al_smote_n$$n_pos.csv \
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \
				> ../results/SMOTE_$$treatment/$(DATASET)/experiment_n$$n_pos.log 2>&1 & \
		done; \
	done

# Utility targets
.PHONY: status
status:
	@echo "Checking running experiments..."
	@echo "Regular experiments:"
	@ps aux | grep naive_bayes_AL.py | grep -v grep | grep -v SMOTE || echo "No regular experiments currently running"
	@echo ""
	@echo "SMOTE experiments:"
	@ps aux | grep naive_bayes_AL_SMOTE.py | grep -v grep || echo "No SMOTE experiments currently running"

.PHONY: clean
clean:
	@echo "Cleaning up log files..."
	@find ../results -name "*.log" -delete

.PHONY: help
help:
	@echo "Available targets:"
	@echo "  all                    - Run all regular experiments (all treatments, all datasets, all n_pos values)"
	@echo "  all-smote              - Run all SMOTE experiments (all treatments, all datasets, all n_pos values)"
	@echo ""
	@echo "Treatment-specific targets:"
	@echo "  run-treatment TREATMENT=<name>     - Run regular experiments for specific treatment"
	@echo "  run-treatment-smote TREATMENT=<name> - Run SMOTE experiments for specific treatment"
	@echo ""
	@echo "Dataset-specific targets:"
	@echo "  run-dataset DATASET=<name>         - Run regular experiments for specific dataset"
	@echo "  run-dataset-smote DATASET=<name>   - Run SMOTE experiments for specific dataset"
	@echo ""
	@echo "Utility targets:"
	@echo "  status                 - Check running experiments"
	@echo "  clean                  - Clean up log files"
	@echo "  help                   - Show this help message"
	@echo "  venv                   - Create virtual environment"
	@echo ""
	@echo "Available treatments:"
	@echo "  tfidf_100_max_features_10000_top_n_100"
	@echo "  tfidf_50_max_features_10000_top_n_50"
	@echo "  tfidf_autoencoder_100_batch_size_32_epochs_50_learning_rate_0.001_max_features_10000_random_state_42_top_n_100"
	@echo "  tfidf_autoencoder_50_batch_size_32_epochs_50_learning_rate_0.001_max_features_10000_random_state_42_top_n_50"
	@echo "  tfidf_autoencoder_50_fixed_batch_size_32_epochs_50_learning_rate_0.001_max_features_10000_random_state_42_top_n_50"
	@echo "  tfidf_autoencoder_batch_size_32_epochs_50_learning_rate_0.001_max_features_5000_random_state_42_top_n_30"
	@echo "  tfidf_autoencoder_test_batch_size_64_epochs_20_learning_rate_0.001_max_features_5000_random_state_42_top_n_25"
	@echo "  tfidf_chi2_100_max_features_10000_top_n_100"
	@echo "  tfidf_chi2_50_max_features_10000_top_n_50"
	@echo "  tfidf_chi2_svc_100_max_features_10000_random_state_42_svc_C_1.0_top_n_100"
	@echo "  tfidf_chi2_svc_50_max_features_10000_random_state_42_svc_C_1.0_top_n_50"
	@echo "  tfidf_chi2_svc_max_features_5000_random_state_42_svc_C_1.0_top_n_25"
	@echo "  tfidf_ig_100_max_features_10000_random_state_42_top_n_100"
	@echo "  tfidf_ig_50_max_features_10000_random_state_42_top_n_50"
	@echo ""
	@echo "Available datasets:"
	@echo "  Hall"
	@echo "  Kitchenham"
	@echo "  Radjenovic"
	@echo "  Wahono"
	@echo ""
	@echo "n_pos values: [8, 16, 32]"
	@echo ""
	@echo "Examples:"
	@echo "  make all"
	@echo "  make all-smote"
	@echo "  make run-treatment TREATMENT=tfidf_50_max_features_10000_top_n_50"
	@echo "  make run-dataset DATASET=Hall"
