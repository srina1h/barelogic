#!/usr/bin/env python3
"""
Script to generate a simple Makefile that automatically runs all n_pos values
and dynamically discovers treatment directories
"""

import os
import glob

# Configuration
PYTHON_VERSION = "python3"
VENV_NAME = "venv"
VENV_PYTHON = "$(VENV_NAME)/bin/python"

# Experiment parameters
REPEATS = 20
BATCH_SIZE = 1000
N_POS_VALUES = [8, 16, 32]

# Datasets
DATASETS = ["Hall", "Kitchenham", "Radjenovic", "Wahono"]

def discover_treatments():
    """Dynamically discover treatment directories from ../data/"""
    data_dir = "../data"
    if not os.path.exists(data_dir):
        print(f"Warning: {data_dir} does not exist")
        return []
    
    treatments = []
    for item in os.listdir(data_dir):
        item_path = os.path.join(data_dir, item)
        if os.path.isdir(item_path) and item != "raw":
            # Check if this directory has all 4 dataset files
            has_all_datasets = all(
                os.path.exists(os.path.join(item_path, f"{dataset}.csv"))
                for dataset in DATASETS
            )
            if has_all_datasets:
                treatments.append(item)
    
    return sorted(treatments)

def generate_makefile():
    """Generate a simple Makefile"""
    
    treatments = discover_treatments()
    print(f"Discovered {len(treatments)} treatment directories: {treatments}")
    
    content = f"""# Makefile for running naive_bayes_AL experiments
# All experiments run in background with all n_pos values (8, 16, 32)
# Generated by generate_makefile.py

# Python configuration
PYTHON_VERSION = {PYTHON_VERSION}
VENV_NAME = {VENV_NAME}
VENV_PYTHON = {VENV_PYTHON}

# Experiment parameters
REPEATS = {REPEATS}
BATCH_SIZE = {BATCH_SIZE}
N_POS_VALUES = {' '.join(map(str, N_POS_VALUES))}

# Datasets
DATASETS = {' '.join(DATASETS)}

# Discovered treatments
TREATMENTS = {' \\\n             '.join(treatments)}

# Setup virtual environment
.PHONY: venv
venv:
	@echo "Creating virtual environment..."
	@$(PYTHON_VERSION) -m venv $(VENV_NAME)
	@echo "Installing required packages..."
	@$(VENV_PYTHON) -m pip install --upgrade pip
	@$(VENV_PYTHON) -m pip install pandas numpy scikit-learn imbalanced-learn
	@echo "Virtual environment setup complete!"

# Run all regular experiments (all treatments, all datasets, all n_pos values)
.PHONY: all
all: venv
	@echo "Running all regular experiments..."
	@for treatment in $(TREATMENTS); do \\
		for dataset in $(DATASETS); do \\
			echo "Running $$treatment/$$dataset for all n_pos values..."; \\
			mkdir -p ../results/$$treatment/$$dataset; \\
			for n_pos in {' '.join(map(str, N_POS_VALUES))}; do \\
				echo "  Starting n_pos=$$n_pos..."; \\
				nohup $(VENV_PYTHON) naive_bayes_AL.py \\
					--input ../data/$$treatment/$$dataset.csv \\
					--output ../results/$$treatment/$$dataset/results_nb_sk_al_n$$n_pos.csv \\
					--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \\
					> ../results/$$treatment/$$dataset/experiment_n$$n_pos.log 2>&1 & \\
			done; \\
		done; \\
	done
	@echo "All regular experiments started!"

# Run all SMOTE experiments (all treatments, all datasets, all n_pos values)
.PHONY: all-smote
all-smote: venv
	@echo "Running all SMOTE experiments..."
	@for treatment in $(TREATMENTS); do \\
		for dataset in $(DATASETS); do \\
			echo "Running SMOTE $$treatment/$$dataset for all n_pos values..."; \\
			mkdir -p ../results/SMOTE_$$treatment/$$dataset; \\
			for n_pos in {' '.join(map(str, N_POS_VALUES))}; do \\
				echo "  Starting SMOTE n_pos=$$n_pos..."; \\
				nohup $(VENV_PYTHON) naive_bayes_AL_SMOTE.py \\
					--input ../data/$$treatment/$$dataset.csv \\
					--output ../results/SMOTE_$$treatment/$$dataset/results_nb_sk_al_smote_n$$n_pos.csv \\
					--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \\
					> ../results/SMOTE_$$treatment/$$dataset/experiment_n$$n_pos.log 2>&1 & \\
			done; \\
		done; \\
	done
	@echo "All SMOTE experiments started!"

# Run experiments for a specific treatment
.PHONY: run-treatment
run-treatment: venv
	@if [ -z "$(TREATMENT)" ]; then \\
		echo "Usage: make run-treatment TREATMENT=<treatment_name>"; \\
		echo "Available treatments: $(TREATMENTS)"; \\
		exit 1; \\
	fi
	@echo "Running regular experiments for treatment: $(TREATMENT)"
	@for dataset in $(DATASETS); do \\
		echo "Running $(TREATMENT)/$$dataset for all n_pos values..."; \\
		mkdir -p ../results/$(TREATMENT)/$$dataset; \\
		for n_pos in {' '.join(map(str, N_POS_VALUES))}; do \\
			echo "  Starting n_pos=$$n_pos..."; \\
			nohup $(VENV_PYTHON) naive_bayes_AL.py \\
				--input ../data/$(TREATMENT)/$$dataset.csv \\
				--output ../results/$(TREATMENT)/$$dataset/results_nb_sk_al_n$$n_pos.csv \\
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \\
				> ../results/$(TREATMENT)/$$dataset/experiment_n$$n_pos.log 2>&1 & \\
		done; \\
	done

# Run SMOTE experiments for a specific treatment
.PHONY: run-treatment-smote
run-treatment-smote: venv
	@if [ -z "$(TREATMENT)" ]; then \\
		echo "Usage: make run-treatment-smote TREATMENT=<treatment_name>"; \\
		echo "Available treatments: $(TREATMENTS)"; \\
		exit 1; \\
	fi
	@echo "Running SMOTE experiments for treatment: $(TREATMENT)"
	@for dataset in $(DATASETS); do \\
		echo "Running SMOTE $(TREATMENT)/$$dataset for all n_pos values..."; \\
		mkdir -p ../results/SMOTE_$(TREATMENT)/$$dataset; \\
		for n_pos in {' '.join(map(str, N_POS_VALUES))}; do \\
			echo "  Starting SMOTE n_pos=$$n_pos..."; \\
			nohup $(VENV_PYTHON) naive_bayes_AL_SMOTE.py \\
				--input ../data/$(TREATMENT)/$$dataset.csv \\
				--output ../results/SMOTE_$(TREATMENT)/$$dataset/results_nb_sk_al_smote_n$$n_pos.csv \\
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \\
				> ../results/SMOTE_$(TREATMENT)/$$dataset/experiment_n$$n_pos.log 2>&1 & \\
		done; \\
	done

# Run experiments for a specific dataset across all treatments
.PHONY: run-dataset
run-dataset: venv
	@if [ -z "$(DATASET)" ]; then \\
		echo "Usage: make run-dataset DATASET=<dataset_name>"; \\
		echo "Available datasets: $(DATASETS)"; \\
		exit 1; \\
	fi
	@echo "Running regular experiments for dataset: $(DATASET)"
	@for treatment in $(TREATMENTS); do \\
		echo "Running $$treatment/$(DATASET) for all n_pos values..."; \\
		mkdir -p ../results/$$treatment/$(DATASET); \\
		for n_pos in {' '.join(map(str, N_POS_VALUES))}; do \\
			echo "  Starting n_pos=$$n_pos..."; \\
			nohup $(VENV_PYTHON) naive_bayes_AL.py \\
				--input ../data/$$treatment/$(DATASET).csv \\
				--output ../results/$$treatment/$(DATASET)/results_nb_sk_al_n$$n_pos.csv \\
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \\
				> ../results/$$treatment/$(DATASET)/experiment_n$$n_pos.log 2>&1 & \\
		done; \\
	done

# Run SMOTE experiments for a specific dataset across all treatments
.PHONY: run-dataset-smote
run-dataset-smote: venv
	@if [ -z "$(DATASET)" ]; then \\
		echo "Usage: make run-dataset-smote DATASET=<dataset_name>"; \\
		echo "Available datasets: $(DATASETS)"; \\
		exit 1; \\
	fi
	@echo "Running SMOTE experiments for dataset: $(DATASET)"
	@for treatment in $(TREATMENTS); do \\
		echo "Running SMOTE $$treatment/$(DATASET) for all n_pos values..."; \\
		mkdir -p ../results/SMOTE_$$treatment/$(DATASET); \\
		for n_pos in {' '.join(map(str, N_POS_VALUES))}; do \\
			echo "  Starting SMOTE n_pos=$$n_pos..."; \\
			nohup $(VENV_PYTHON) naive_bayes_AL_SMOTE.py \\
				--input ../data/$$treatment/$(DATASET).csv \\
				--output ../results/SMOTE_$$treatment/$(DATASET)/results_nb_sk_al_smote_n$$n_pos.csv \\
				--n_pos $$n_pos --repeats $(REPEATS) --batch_size $(BATCH_SIZE) \\
				> ../results/SMOTE_$$treatment/$(DATASET)/experiment_n$$n_pos.log 2>&1 & \\
		done; \\
	done

# Utility targets
.PHONY: status
status:
	@echo "Checking running experiments..."
	@echo "Regular experiments:"
	@ps aux | grep naive_bayes_AL.py | grep -v grep | grep -v SMOTE || echo "No regular experiments currently running"
	@echo ""
	@echo "SMOTE experiments:"
	@ps aux | grep naive_bayes_AL_SMOTE.py | grep -v grep || echo "No SMOTE experiments currently running"

.PHONY: clean
clean:
	@echo "Cleaning up log files..."
	@find ../results -name "*.log" -delete

.PHONY: help
help:
	@echo "Available targets:"
	@echo "  all                    - Run all regular experiments (all treatments, all datasets, all n_pos values)"
	@echo "  all-smote              - Run all SMOTE experiments (all treatments, all datasets, all n_pos values)"
	@echo ""
	@echo "Treatment-specific targets:"
	@echo "  run-treatment TREATMENT=<name>     - Run regular experiments for specific treatment"
	@echo "  run-treatment-smote TREATMENT=<name> - Run SMOTE experiments for specific treatment"
	@echo ""
	@echo "Dataset-specific targets:"
	@echo "  run-dataset DATASET=<name>         - Run regular experiments for specific dataset"
	@echo "  run-dataset-smote DATASET=<name>   - Run SMOTE experiments for specific dataset"
	@echo ""
	@echo "Utility targets:"
	@echo "  status                 - Check running experiments"
	@echo "  clean                  - Clean up log files"
	@echo "  help                   - Show this help message"
	@echo "  venv                   - Create virtual environment"
	@echo ""
	@echo "Available treatments:"
"""
    
    for treatment in treatments:
        content += f"	@echo \"  {treatment}\"\n"
    
    content += """	@echo ""
	@echo "Available datasets:"
"""
    
    for dataset in DATASETS:
        content += f"	@echo \"  {dataset}\"\n"
    
    content += f"""	@echo ""
	@echo "n_pos values: {N_POS_VALUES}"
	@echo ""
	@echo "Examples:"
	@echo "  make all"
	@echo "  make all-smote"
	@echo "  make run-treatment TREATMENT=tfidf_50_max_features_10000_top_n_50"
	@echo "  make run-dataset DATASET=Hall"
"""
    
    return content

if __name__ == "__main__":
    makefile_content = generate_makefile()
    with open("Makefile", "w") as f:
        f.write(makefile_content)
    
    treatments = discover_treatments()
    total_experiments = len(treatments) * len(DATASETS) * len(N_POS_VALUES) * 2  # regular + SMOTE
    
    print("Makefile generated successfully!")
    print(f"Discovered {len(treatments)} treatment directories")
    print(f"Total experiments: {total_experiments} (regular + SMOTE)")
    print(f"Experiments per treatment: {len(DATASETS) * len(N_POS_VALUES) * 2}")
    print(f"Experiments per dataset: {len(treatments) * len(N_POS_VALUES) * 2}")
